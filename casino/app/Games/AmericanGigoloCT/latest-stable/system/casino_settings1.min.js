function getParameterByName(e, t) {
    t || (t = window.location.href), e = e.replace(/[\[\]]/g, "\\$&");
    var a = new RegExp("[?&]" + e + "(=([^&#]*)|&|#|$)", "i").exec(t);
    return a ? a[2] ? decodeURIComponent(a[2].replace(/\+/g, " ")) : "" : null
}
var nua = navigator.userAgent,
    isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(nua),
    secureToken = getParameterByName("token") || "cd6bc10414b9d3fdb8fba52579f654ad",
    jpUrl = getParameterByName("jpurl") || "",
    serverurl = getParameterByName("serverurl") || "//rgs-stage.casino-technology.com/rgsm",
    icasino = getParameterByName("ic") || "6aa9142c75aa09a45ddab693c55e37a7",
    icasino_account = getParameterByName("ica") || "demo",
    session_key = String(100 + Math.random()),
    sys_lang = getParameterByName("lang") || "bg",
    exit_js = getParameterByName("exit_js"),
    exit_url = getParameterByName("exit_url"),
    siteproto = getParameterByName("siteproto"),
    initial_bet = getParameterByName("initial_bet"),
    fullscreenAtBegin = 0 != getParameterByName("fullscreen") || isMobile,
    fullScreenButonOn = 0 != getParameterByName("fullScreenAllow") && !isMobile,
    exitAllow = 0 != getParameterByName("exitAllow"),
    sound_always = getParameterByName("sound_always"),
    all_attractions = 0 != getParameterByName("all_attractions"),
    regulation = getParameterByName("regulation") || "",
    opera_mini = "ke" === regulation && (nua.indexOf("Opera Mini") > -1 || nua.indexOf("OPR/") > -1),
    mtTime = getParameterByName("mtTime") || 0,
    demodata;

function rgsgameEvent(event) {
    if (exit_js && exit_js.length > 1 && "$EXIT_JS" != exit_js) eval(exit_js);
    else {
        var can_change_location = !1,
            referrer = document.referrer;
        if (referrer && exit_url) {
            var parserReferrer = document.createElement("a"),
                parserExitUrl = document.createElement("a");
            parserReferrer.href = referrer, parserExitUrl.href = exit_url, can_change_location = parserReferrer.hostname == parserExitUrl.hostname
        }
        exit_url && can_change_location && "$EXIT_URL" != exit_url ? (currSession.multigame_application && (exit_url += "?session_id=" + session_id + "&serverurl=" + serverurl + "&ping_time=" + ping_time + "&retry_interval=" + 1e3 * currSession.client_request_timeout + "&lang=" + sys_lang), window.location = exit_url) : window.close()
    }
}
opera_mini && (window.onerror = function(e, t, a) {
    alert(e + "\n" + t + "\n" + a)
}), fullScreenButonOn &= !(/iPad|iPhone|iPod/.test(nua) && !window.MSStream), getParameterByName("demodata") && (demodata = [], demodata.push(JSON.parse(getParameterByName("demodata")))), $(document).ready(function() {
    $(".peShiner").peShiner({
        hover: !1,
        duration: 3,
        angle: 15,
        size: 100,
        color: "monoHL",
        glow: 6,
        repeat: .1,
        reverse: !1,
        delay: 0
    })
});
var $CT_gameObject = {
        game_assets: {
            images: {},
            syms: {}
        }
    },
    attraction = {},
    gameAsset = $CT_gameObject.game_assets,
    langText, total_files_loaded = 0,
    $tSounds = 0,
    tablet = window.screen.height / window.screen.width < 1.5,
    iOs = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream,
    videoEnd = -1,
    withSound = 0,
    oS, allImagesLoaded = 0,
    allSounsLoaded = 0,
    canPlayVideo = -1,
    lastTouchEnd = 0,
    nbeg = "../../html-interface-stable/";

function fetchContent() {
    gameName = gameConfig.directory_name, game_name = gameConfig.app_name, totalBetLock = (getParameterByName("totalBetLock") || "").search(gameName) >= 0;
    var e, t, a, n = 0,
        s = "../../" + nbeg + "1024/games";
    if ($("head").append('<link rel="stylesheet" type="text/css" href="../css/' + ("1080" === siteproto ? "tablet1080" : "tablet2") + ".min.css?nnn=" + (new Date).getTime() + '">'), all_attractions)
        if ($(".wrapper").append('<div id="banner" style="position:absolute; width:458px; height:218px;\tleft:-79px;top:-278px; background-image: url(' + nbeg + "1024/banners/" + gameName + '.jpg");"> </div>'), iOs) videoEnd = 1;
        else {
            function i() {
                videoEnd = 1, console.log("NO video FOUND (" + gameName + ".mp4)"), canPlayVideo = 0
            }

            function r() {
                videoEnd <= 0 && null != video && (video.removeEventListener("error", i, !0), video.removeEventListener("ended", r, !0), video.removeEventListener("click", r, !0), $("#video").remove()), videoEnd = 1, allImagesLoaded & allSounsLoaded && _CTSlotApp.gameIsReady()
            }

            function o() {
                if (!videoEnd && null != video) switch (canPlayVideo) {
                    case -1:
                        requestAnimationFrame(o);
                        break;
                    case 0:
                        r();
                        break;
                    case 1:
                        var e = video.play();
                        void 0 !== e && e.then(function() {
                            $("#video").css("display", "block"), video.play(), video.addEventListener("click", r, !0)
                        }).catch(function() {
                            r()
                        })
                }
            }
            $(".wrapper").append('<video id="video" width="458" height="258" style="position:absolute;display:none;\tleft:-79px;top:-278px;" autoplay >  <source src="' + nbeg + "1024/videos/" + gameName + '.mp4" type="video/mp4"> </video>'), video.addEventListener("error", i, !0), video.oncanplay = function() {
                videoEnd < 0 && null != video && (videoEnd = 0, video.addEventListener("ended", r, !0), video.muted = !sound_always, o())
            }
        }
    else videoEnd = 1;
    var m = "scale(.7) translate(-71%,-71%)";
    !isMobile || tablet || opera_mini || ($(window).width() > $(window).height() ? (m = "scale(.5) translateX(-50%)", $("#soundBtns").css({
        top: "70%",
        "-ms-transform": m,
        "-webkit-transform": m,
        transform: m
    }), m = "scale(.5) translate(-100%,-10%)", $(".wrapper").css({
        "-ms-transform": m,
        "-webkit-transform": m,
        transform: m
    }), m = "scale(1.5)", !iOs && all_attractions && $("#video").css({
        top: "-328px",
        "-ms-transform": m,
        "-webkit-transform": m,
        transform: m
    }), m = "scale(.75) translateX(350%)", $("#withSound").css({
        right: "initial",
        "-ms-transform": m,
        "-webkit-transform": m,
        transform: m
    }), m = "scale(.75) translateX(-280%)", $("#withoutSound").css({
        left: "initial",
        "-ms-transform": m,
        "-webkit-transform": m,
        transform: m
    })) : $(".wrapper").css({
        "-ms-transform": m,
        "-webkit-transform": m,
        transform: m
    })), u("Asset" + gameName + "_1024_base_hi.as", "text", function(e) {
        var t = 0;
        if ((m = e.indexOf("{", t)) > -1) {
            var n = e.indexOf("}", m + 6);
            gameAsset.syms = JSON.parse(String(e.substring(m, n + 1))), t = n + 2
        }
        $.each(gameAsset.syms, function(e, t) {
            gameAsset.syms[e] = s + t
        });
        for (var i = "", r = "", o = "", m = e.indexOf('"', t); m > -1;) {
            var l = e.indexOf('"', m + 1),
                u = e.indexOf("_", l) + 1,
                g = e.indexOf("_", u);
            n = e.indexOf(":Class", g);
            switch (e.slice(u, g)) {
                case "asset":
                    i = d(i, e, g, n, m, l);
                    break;
                case "sound":
                    r = d(r, e, g, n, m, l);
                    break;
                default:
                    o = d(o, e, g, n, m, l)
            }
            m = e.indexOf('"', n)
        }
        var _ = JSON.parse(i + "}"),
            p = gameName + "/game",
            f = "../html-interface-stable/HD_Backgrounds",
            b = "background_online_1920",
            h = b + "_attract";
        _[b] = _[b].replace(p, f), h in _ && (all_attractions ? _[h] = _[h].replace(p, f) : delete _[h]), opera_mini && (_[b] = _[b].replace("1920", "opera"), _[b] = _[b].replace(f, f + "/Opera_mini_697x392"), r = "{"), $.each(_, function(e, t) {
            ("paytab" !== e.substr(0, 6) && "digits_pay" !== e.substr(0, 10) && e.search("jackpot") < 0 || e.search("jackpot") > 0 && "" !== jpUrl) && (gameAsset.images[e] = {
                path: e !== h && e !== b ? s + t : t
            })
        }), _ = JSON.parse(o + "}"), $.each(_, function(e, t) {
            (e.search("_expanded") < 0 && e.search("extra_") < 0 && (e.search("main_") < 0 || e.search("_x") > 0) && e.search("free_") < 0 && e.search("super_") < 0 || !opera_mini) && (gameAsset.images[e] = {
                path: s + t
            })
        }), a = gameAsset.sounds = JSON.parse(r + "}"), $.each(a, function(e, t) {
            a[e] = s + t
        }), c()
    });
    for (var l = 0; l < currSession.preferred_languages.length && sys_lang != currSession.preferred_languages[l]; l++);

    function c() {
        if (6 == ++n) {
            var s = "_small.";
            if (delete a.main_auto_spin, delete a.fg_background_loop, $.each(a, function(e) {
                    (e.search("main_spin") >= 0 || "main_attraction" === e && isMobile) && delete a[e]
                }), all_attractions) {
                if (isMobile && (e.bigWin1 = e.bigWin1.replace(".", s), e.bigWin2 = e.bigWin2.replace(".", s), e.megaWin = e.megaWin.replace(".", s), e.bigWinCoins = e.bigWinCoins.replace(".", s)), gameAConf.wizard_bonus)
                    for (var i = gameAConf.wizard_ = [], r = gameAConf.wizard_bonus.length, o = 0; o < r; o++) {
                        var m = gameAConf.wizard_bonus[o],
                            l = ["wizard_" + o];
                        for (i[o] = {
                                anim: {
                                    start: [0, m[4]],
                                    speed: 40
                                }
                            }, i[o].dim = [], i[o].name = gameAsset.images[l].path, delete gameAsset.images[l], j = 0; j < 9; j++) 4 != j && gameAConf.wizard_[o].dim.push(m[j])
                    }
                attraction.bigWin1 = nbeg + "1024/" + e.bigWin1, delete e.bigWin1, attraction.bigWin2 = nbeg + "1024/" + e.bigWin2, delete e.bigWin2, attraction.megaWin = nbeg + "1024/" + e.megaWin, delete e.megaWin, attraction.bigWinCoins = nbeg + "1024/" + e.bigWinCoins, delete e.bigWinCoins, gameAConf.megaWin = {
                    dim: [1024, 640, 0, 40, 256, 160, 380, 284],
                    anim: {
                        start: [0, 24],
                        loop: [24, 56],
                        speed: 40
                    }
                }, gameAConf.bigWin1 = {
                    dim: [1024, 768, 0, 0, 256, 192, 385, 148],
                    anim: {
                        start: [0, 23],
                        speed: 40
                    }
                }, gameAConf.bigWinCoins = {
                    dim: [820, 460, 102, 168, 205, 115, 395, 348],
                    anim: {
                        start: [0, 24],
                        loop: [0, 24],
                        speed: 40
                    }
                }, 5 == gameConfig.columns && (gameAConf.ofakind5 = [{
                    name: "5_of_a_kind_1.png",
                    dim: [512, 384, 256, 190, 256, 192, 383, 280],
                    anim: {
                        start: [0, 89],
                        speed: 40
                    }
                }, {
                    name: "5_of_a_kind_2.png",
                    dim: [512, 384, 256, 190, 256, 192, 383, 280],
                    anim: {
                        start: [0, 89],
                        speed: 40
                    }
                }]), "" != jpUrl && (gameAConf.jackpotWin = [{
                    name: "Jackpot_short_0.png",
                    dim: [512, 324, 256, 190, 256, 162, 383, 280],
                    anim: {
                        start: [0, 155],
                        speed: 40
                    }
                }]), gameAConf.cashTime = [{
                    name: "cash_time_1.png",
                    dim: [512, 384, 256, 190, 256, 192, 383, 280],
                    anim: {
                        start: [0, 89],
                        speed: 40
                    }
                }, {
                    name: "cash_time_2.png",
                    dim: [512, 384, 256, 190, 256, 192, 383, 280],
                    anim: {
                        start: [0, 89],
                        speed: 40
                    }
                }];
                var c = gameConfig.paytables[gameConfig.main_subgame_reels_set];
                if (!gameAConf.wilds5)
                    for (var u in c.paytable_wilds)
                        if (u in c.paytable)
                            for (var d in c.paytable[u]) 5 == d && (gameAConf.wilds5 = [{
                                sound: "fire .mp3",
                                name: "fire_01.png",
                                dim: [512, 320, 256, 160, 256, 160, 380, 230],
                                anim: {
                                    start: [0, 49],
                                    speed: 40
                                }
                            }]);
                for (var u in c = c.paytable_scatters)
                    for (var d in c[u])
                        if ("free_games" === c[u][d].bonus_type) {
                            gameAConf.free_games = [{
                                name: "free_games_1.png",
                                dim: [512, 384, 256, 190, 256, 192, 383, 280],
                                anim: {
                                    start: [0, 89],
                                    speed: 40
                                }
                            }, {
                                name: "free_games_2.png",
                                dim: [512, 384, 256, 190, 256, 192, 383, 280],
                                anim: {
                                    start: [0, 89],
                                    speed: 40
                                }
                            }];
                            break
                        }
                function g(e, t) {
                    var n = gameAConf[e];
                    if (n)
                        for (var s = n.length, i = 0; i < s; i++) isMobile && (n[i].name = n[i].name.replace(".", "_small.")), attraction[e + i] = (void 0 === t ? nbeg + "1024/attractions/" : "..") + n[i].name, n[i].sound && (a[e + i] = "../../" + nbeg + "audio/AUDIOforAttractions/" + n[i].sound)
                }
                g("wizard_", 1), g("jackpotWin"), g("cashTime"), g("big_anim"), g("free_games"), g("super_games"), g("ofakind5"), g("bonus_attraction"), g("before_fg_attraction"), g("exWilds_attraction"), g("fg_wild_attraction"), g("bigAnim_attraction"), g("scatters_attraction"), g("wilds5"), g("full_house")
            } else opera_mini || (delete e.megaWin, delete e.bigWin1, delete e.bigWin2, delete e.bigWinCoins, delete t.megaWin, delete t.bigWin, delete t.celeb1, delete t.celeb2, delete t.celeb3), delete a.wizard, delete gameAsset.images.x4, delete gameAsset.images.x8, delete gameAsset.images.wizard_0, delete gameAsset.images.wizard_1, delete gameAConf.bigAnim_attraction;

            function _(e, t) {
                var a = '<div id="' + e + '"',
                    n = "";
                return $.each(t, function(e, t) {
                    switch (e) {
                        case "html":
                            n = t;
                            break;
                        default:
                            a += " " + e + '="' + t + '"'
                    }
                }), a += ">" + n + "</div>"
            }
            e.left_lines = gameAConf.left_lines.path.replace("/interface/1024/", ""), e.right_lines = gameAConf.right_lines.path.replace("/interface/1024/", ""), $tScripts = $CT_gameObject.scripts.length, $total_images_to_load = Object.keys(e).length + Object.keys(gameAsset.images).length + Object.keys(gameAsset.syms).length, $.each($CT_gameObject.intf.common.helpButtons, function(e, t) {
                $("#helpButtons").append(_(e, t))
            }), "" !== jpUrl && $.each($CT_gameObject.intf.common.topJackpot, function(e, t) {
                $("#topJackpot").append(_(e, t))
            }), gameConfig.double.double_enable && $.each($CT_gameObject.intf.common.menuDouble, function(e, t) {
                $("#gameDoubleInterface").append(_(e, t))
            }), $.each($CT_gameObject.intf.common.downElements, function(e, t) {
                $("#gameMenuInterface").append(_(e, t))
            }), $.each($CT_gameObject.intf.common.menuWindow, function(e, t) {
                $("#menuWindow").append(_(e, t))
            }), $(".animatedBtn").click(function(e) {
                if (!$(this).is(".btnDisabled")) var t = Math.abs($(this).attr("bss")),
                    a = 0,
                    n = 0,
                    s = 1,
                    i = $(this).attr("sps"),
                    r = $(this),
                    o = setInterval(function() {
                        if (s === t) Number($(r).attr("bss")) > 0 && $(r).css({
                            "background-position": "0px 0"
                        }), clearInterval(o), $(r).trigger("animationend", ["animationend", "Event"]);
                        else {
                            var e = s * i,
                                m = parseInt($(r).css("background-size"));
                            n = Math.floor(e / m) * parseInt($(r).css("height")), a = Math.floor(e % m), $(r).css({
                                "background-position": "-" + a + "px -" + n + "px"
                            }), s++
                        }
                    }, 40)
            });
            for (o = 0; o < 10; o++) $("#doubleLast_singlecards").append('<div id="last10single' + o + '" class="doubleLast_singlecard" data-cbgi="dbl_name_last"></div>');
            ! function e(n) {
                var s = document.createElement("script");
                s.type = "text/javascript", s.onload = function() {
                    ! function() {
                        if ($("#preloader_imgs_full").css({
                                width: 68 + Math.round(++total_files_loaded / ($total_images_to_load + $tSounds + $tScripts) * 232)
                            }), total_files_loaded < $tScripts) e(total_files_loaded);
                        else {
                            var n = new CMain;
                            if ($(n).on("exitGame", function(e) {
                                    rgsgameEvent("close")
                                }), opera_mini) withSound = 0, allSounsLoaded = 1, allImagesLoaded && videoEnd > 0 && _CTSlotApp.gameIsReady();
                            else {
                                function s() {
                                    if (withSound = 1, createjs.Sound.initializeDefaultPlugins()) {
                                        var e = 0;

                                        function n() {
                                            $("#preloader_imgs_full").css({
                                                width: 68 + Math.round(++total_files_loaded / ($total_images_to_load + $tSounds + $tScripts) * 232)
                                            }), ++e === $tSounds && (allSounsLoaded = 1, allImagesLoaded && videoEnd > 0 && _CTSlotApp.gameIsReady())
                                        }
                                        createjs.Sound.on("fileload", n), createjs.Sound.on("fileerror", function(e) {
                                            alert(langText.SoundLoadError + e.src), n()
                                        }), $.each(t, function(e, t) {
                                            createjs.Sound.registerSound(nbeg + "audio/" + t, e), $tSounds++
                                        }), $.each(a, function(e, t) {
                                            createjs.Sound.registerSound(".." + t, e), $tSounds++
                                        })
                                    }
                                }
                                sound_always ? s() : ($("#soundBtns").css({
                                    display: "inline-block"
                                }), $("#textSound").html(langText.soundQuestion), $(".sndBtn").click(function(e) {
                                    !iOs && fullscreenAtBegin && screenfull.toggle();
                                    var t = $(this).attr("id"),
                                        a = document.createElement("audio").canPlayType("audio/mp3");
                                    switch ("maybe" !== a && "probably" !== a && (alert(langText.SoundCodecError), t = "withoutSound"), $("#soundBtns").remove(), t) {
                                        case "withSound":
                                            s();
                                            break;
                                        case "withoutSound":
                                            withSound = 0, allSounsLoaded = 1, allImagesLoaded & videoEnd > 0 && _CTSlotApp.gameIsReady()
                                    }
                                    iOs || !all_attractions || videoEnd || (video.muted = !withSound)
                                }))
                            }
                            jpUrl = getParameterByName("jp_disp_url") || ""
                        }
                    }()
                }, s.src = ".." + $CT_gameObject.scripts[n] + (n < $tScripts - !opera_mini ? "?nnn=" + (new Date).getTime() : ""), document.body.appendChild(s)
            }(total_files_loaded)
        }
    }

    function u(e, t, a) {
        var n = e + "?nnn=" + (new Date).getTime();
        $.ajax({
            type: "GET",
            dataType: t,
            url: n,
            error: function(s, i, r) {
                var o = n.replace(sys_lang + ".as", "en.as");
                $.ajax({
                    type: "GET",
                    dataType: t,
                    url: o,
                    error: function() {
                        alert(e + "\n" + o + langText.NOT_FOUND)
                    },
                    success: function(e) {
                        a(e)
                    }
                })
            },
            success: function(e) {
                a(e)
            }
        })
    }

    function d(e, t, a, n, s, i) {
        return e + ("" === e ? '{"' : ',"') + t.slice(a + 1, n) + '":"' + t.slice(s + 31, i + 1)
    }
    l == currSession.preferred_languages.length && (sys_lang = currSession.preferred_languages[0]), u("Main" + gameName + "_1024_" + sys_lang + ".as", "text", function(e) {
        var t, a = 0,
            n = "",
            i = e.indexOf("{", a);
        if (i > -1) {
            var r = e.indexOf("}}", i + 6);
            gameAsset.text = JSON.parse(String(e.substring(i, r + 2))), a = r + 2
        }
        for (i = e.indexOf('"', a); i > -1;) {
            var o = e.indexOf('"', i + 1),
                m = e.indexOf("var ", o) + 3;
            n = d(n, e, m, r = e.indexOf(":Class", m), i, o), i = e.indexOf('"', r)
        }
        t = JSON.parse(n + "}"), $.each(t, function(e, t) {
            "paytab" != e.substr(0, 6) && (gameAsset.images[e] = {
                path: s + t
            })
        }), c()
    }), u("game_init.conf", "json", function(e) {
        gameAConf = gameAsset.gameConf = e, c()
    }), u(nbeg + "Mainsys_" + sys_lang + ".as", "text", function(e) {
        gameAsset.translations = JSON.parse(e), langText = gameAsset.translations.texts, c()
    }), u(nbeg + ("1080" === siteproto ? "1080/interface" : "1024/interface2" + (opera_mini ? "_opera" : "")) + ".json", "json", function(a) {
        if ($.each(a, function(e, t) {
                $CT_gameObject[e] = t
            }), e = $CT_gameObject.interface_images, $.each(e, function(t, a) {
                (a.search("double") > 0 && !gameConfig.double.double_enable || "" === jpUrl && a.search("ackpot") > 0 || opera_mini && (a.search("No") > 0 || a.search("full") > 0 || a.search("hist") > 0 || a.search("sound") > 0)) && delete e[t]
            }), t = $CT_gameObject.interface_sounds, "be" === regulation)
            for (var n = 1; n < 6; n++) t["service_stop00" + n] = "service_stop00" + n + ".wav.mp3";
        $.each(t, function(e, a) {
            (a.search("double") > 0 && !gameConfig.double.double_enable || a.search("jpWin") > 0 && "" === jpUrl || opera_mini) && delete t[e]
        }), c()
    }), u(nbeg + "1024/CTSysAssets.as", "json", function(e) {
        $CT_gameObject.screenConfigs = e, c()
    })
}
null != opera_mini && opera_mini && (all_attractions = 0), document.addEventListener("gesturestart", function(e) {
        e.preventDefault()
    }), document.addEventListener("touchend", function(e) {
        var t = (new Date).getTime();
        t - lastTouchEnd <= 250 && (e.preventDefault(), $(e.target).trigger("click")), lastTouchEnd = t
    }, !1),
    function() {
        "use strict";
        var e = "undefined" == typeof window ? {} : window.document,
            t = "undefined" != typeof module && module.exports,
            a = function() {
                for (var t, a = [
                        ["requestFullscreen", "exitFullscreen", "fullscreenElement", "fullscreenEnabled", "fullscreenchange", "fullscreenerror"],
                        ["webkitRequestFullscreen", "webkitExitFullscreen", "webkitFullscreenElement", "webkitFullscreenEnabled", "webkitfullscreenchange", "webkitfullscreenerror"],
                        ["webkitRequestFullScreen", "webkitCancelFullScreen", "webkitCurrentFullScreenElement", "webkitCancelFullScreen", "webkitfullscreenchange", "webkitfullscreenerror"],
                        ["mozRequestFullScreen", "mozCancelFullScreen", "mozFullScreenElement", "mozFullScreenEnabled", "mozfullscreenchange", "mozfullscreenerror"],
                        ["msRequestFullscreen", "msExitFullscreen", "msFullscreenElement", "msFullscreenEnabled", "MSFullscreenChange", "MSFullscreenError"]
                    ], n = 0, s = a.length, i = {}; n < s; n++)
                    if ((t = a[n]) && t[1] in e) {
                        for (n = 0; n < t.length; n++) i[a[0][n]] = t[n];
                        return i
                    } return !1
            }(),
            n = {
                request: function(t) {
                    var n = a.requestFullscreen;
                    (t = t || e.documentElement)[n]()
                },
                exit: function() {
                    e[a.exitFullscreen]()
                },
                toggle: function(e) {
                    this.isFullscreen ? this.exit() : this.request(e)
                },
                onchange: function(t) {
                    e.addEventListener(a.fullscreenchange, t, !1)
                },
                onerror: function(t) {
                    e.addEventListener(a.fullscreenerror, t, !1)
                },
                raw: a
            };
        a ? (Object.defineProperties(n, {
            isFullscreen: {
                get: function() {
                    return Boolean(e[a.fullscreenElement])
                }
            },
            element: {
                enumerable: !0,
                get: function() {
                    return e[a.fullscreenElement]
                }
            },
            enabled: {
                enumerable: !0,
                get: function() {
                    return Boolean(e[a.fullscreenEnabled])
                }
            }
        }), t ? module.exports = n : window.screenfull = n) : t ? module.exports = !1 : window.screenfull = !1
    }();
var networkOut = 0,
    _CTSlotApp = void 0,
    inDouble = 0,
    creditOnly = !1,
    cashOnly = !1,
    session_id, ms1 = ".msg_string1",
    msb = "#frameMsgBar",
    cw = "#congr_win",
    fast = 0,
    recovery = 0,
    subgamesList = null,
    currWaitParams = {},
    currSubgameIndex = 0,
    state = "appStarted",
    currSubgame = {
        subgame_label: "main"
    },
    Currency, inJackpot = 0,
    inIntJackpot = 0,
    activeSeq = 10,
    trace_type = "debug",
    finish_game, Hst = [],
    congrTimer, extraBet = 0,
    ping_time = 1e3,
    states = {
        appStarted: {
            next: "gameInit",
            nextAction: gameInitCmd
        },
        gameInit: {
            next: "mainGameStarted",
            nextAction: playStartCmd
        },
        prevWinDisplayLoop: {
            next: "mainGameStarted",
            nextAction: playStartCmd
        },
        mainGameStarted: {
            next: "subgameAnimFinished",
            nextAction: subgameAnimFinishCmd
        },
        subgameStarted: {
            next: "subgameAnimFinished",
            nextAction: subgameAnimFinishCmd
        },
        subgameAnimFinished: {
            next: "subgameFinished",
            nextAction: subgameFinishCmd
        },
        subgameFinished: {
            next: "DYN:gameFinished|subgameStarted|waitForContinue",
            nextAction: subgameNextCmd
        },
        waitForContinue: {
            next: "DYN:subgameFinished|doubleSubgameStarted",
            nextAction: continueCmd
        },
        doubleSubgameStarted: {
            next: "doubleSubgameFinished",
            nextAction: subgameFinishCmd
        },
        doubleSubgameFinished: {
            next: "DYN:waitForContinue|gameFinished",
            nextAction: subgameNextCmd
        },
        gameFinished: {
            next: "prevWinDisplayLoop",
            nextAction: null
        }
    },
    jackpotCommand, appVer = "1.51(29.08.2019)";

function gameInit() {
    fetchContent()
}

function isFunction(e) {
    return e && "[object Function]" === {}.toString.call(e)
}

function enterState(e) {
    state = e, window[e]()
}

function gameInitCmd() {
    sendCommand([{
        command: "init_game",
        game_id: gameID,
        game_name: gameName,
        game_seamless_credit: 1
    }], {
        onComplete: gameInitCmdOK,
        gotoNextState: !0
    })
}

function gameInitCmdOK() {
    gameConfig = serverResponse.game_config, show_win = serverResponse.show_win, finish_game = serverResponse.finish_game_command, freeround_limit = serverResponse.freeround_limit, freeround_play = serverResponse.freeround_play, freeround_lines = serverResponse.freeround_lines, freeround_bet_per_line_cents = serverResponse.freeround_bet_per_line_cents, initial_bet && (gameConfig.line_max_bet = gameConfig.line_min_bet = parseInt(initial_bet / gameConfig.lines_max_number), gameConfig.line_step_bet_numbers = [gameConfig.line_max_bet], gameConfig.lines_min_number = gameConfig.lines_max_number, gameConfig.lines_step_numbers = [gameConfig.lines_max_number]), nextSubgameLabel = gameConfig.main_subgame_label, currDemoMode = null, serverResponse.resume && (recovery = 1, gameResume = serverResponse.resume_game, "pre_bet" != gameResume.status ? (subgamesList = gameResume.last_result, Hst.push({}), Hst[0].gameplay_id = gameResume.gameplay_id, Hst[0].last_result = subgamesList, Hst[0].lines = gameResume.lines, Hst[0].account_status_after_bet = gameResume.account_status_after_bet, Hst[0].game_denom = gameResume.game_denom, Hst[0].game_denom_cents = gameResume.game_denom_cents, playStartInit()) : recovery = 0)
}

function playStartCmd() {
    sendCommand([{
        command: "play",
        game_id: gameID,
        game_name: gameName,
        lines: currNumLines,
        line_bet: currBetPerLine,
        total_bet: currTotalBet,
        extra_bet: extraBet * currBetPerLine,
        game_denom: currDenom.id,
        test_mode: currDemoMode,
        is_freeround: freeround_limit > 0 && freeround_limit >= freeround_play ? 1 : 0,
        simul_mod: 0,
        simul_games: 50,
        autoplay: autoplay
    }], {
        onComplete: playStartCmdOK,
        gotoNextState: !0
    }), game_finished = 0
}

function subgameNext() {
    currSubgameIndex != subgamesList.length - 1 ? "slot_subgame" === subgamesList[++currSubgameIndex].type ? (currSubgame = subgamesList[currSubgameIndex], nextState = "subgameStarted", nextSubgameLabel = currSubgame.subgame_label) : subgamesList[currSubgameIndex].wait_for_continue ? (currWaitReq = subgamesList[currSubgameIndex], currWaitParams = {}, "can_play_red_black_double" === subgamesList[currSubgameIndex].type && (last10Cards = currWaitReq.double_cards_history), nextState = "waitForContinue") : "result_red_black_double" === subgamesList[currSubgameIndex].type && (currDouble = subgamesList[currSubgameIndex], last10Cards = currDouble.double_cards_history, nextState = "doubleSubgameStarted") : nextState = "gameFinished"
}

function playStartInit() {
    currSubgameIndex = -1, currSubgame = null
}

function playStartCmdOK() {
    subgamesList = serverResponse.result, Hst.length == historyMax && Hst.shift(), Hst.push({});
    var e = Hst.length - 1;
    gameplay_id = Hst[e].gameplay_id = serverResponse.gameplay_id, Hst[e].last_result = subgamesList, Hst[e].lines = currNumLines, Hst[e].account_status_after_bet = playerAccount, Hst[e].game_denom = history_currDenom.id, Hst[e].game_denom_cents = history_currDenom.cents, serverResponse.jackpot2_status && (serverResponse.jackpot2_status.interactive_starts.length && (jackpotCommand = serverResponse.jackpot2_status, inIntJackpot = 1), serverResponse.jackpot2_status.hits.length && (jackpotCommand = serverResponse.jackpot2_status, inJackpot = 1)), playStartInit(), subgameNext(), fast = 0, "fast" === finish_game && subgamesList.length < 2 && !autoplay && !inJackpot && !inIntJackpot && 0 == subgamesList[0].win && (sendCommand([{
        command: "subgame_finished",
        game_id: gameID,
        game_name: gameName,
        step_number: subgamesList[currSubgameIndex].step_number
    }, {
        command: "game_finished",
        game_id: gameID,
        game_name: gameName,
        step_number: currSubgame.step_number
    }]), fast = 1, _CTSlotApp.subgameAnimFinished())
}

function continueCmd(e) {
    sendCommand([{
        command: "continue",
        game_id: gameID,
        game_name: gameName,
        step_number: currWaitReq.step_number,
        type: currWaitReq.type,
        continue_params: currWaitParams
    }], {
        onComplete: continueCmdOK,
        gotoNextState: 0 != e
    })
}

function continueCmdOK() {
    subgamesList = subgamesList.concat(serverResponse.result), Hst[Hst.length - 1].last_result = subgamesList, "select_card" === subgamesList[currSubgameIndex].subtype ? _CTSlotApp.continueBonus() : 0 == serverResponse.result.length || recovery && "select_wild_symbol" == gameResume.last_result[gameResume.resume_subgame_index].type ? nextState = "subgameFinished" : subgameNext()
}

function subgameAnimFinishCmd() {
    gotoNextState(!0)
}

function subgameFinishCmd(e) {
    nextSubgameLabel = 0 == currSubgame.is_last ? subgamesList[currSubgameIndex + 1].subgame_label : gameConfig.main_subgame_label, fast ? gotoNextState(!0) : sendCommand([{
        command: "subgame_finished",
        game_id: gameID,
        game_name: gameName,
        step_number: subgamesList[currSubgameIndex].step_number
    }], {
        gotoNextState: 0 != e
    }), recovery = 0
}

function subgameNextCmd() {
    switch (subgameNext(), nextState) {
        case "subgameStarted":
        case "waitForContinue":
            gotoNextState(!0);
            break;
        case "gameFinished":
            fast ? gotoNextState(!0) : sendCommand([{
                command: "game_finished",
                game_id: gameID,
                game_name: gameName,
                step_number: currSubgame.step_number
            }], {
                gotoNextState: !0
            })
    }
}
gotoNextState = function(e) {
    !e && isFunction(states[state].nextAction) ? (nextState = states[state].next, states[state].nextAction()) : enterState(e ? nextState : states[state].next)
}, subgameStarted = function() {
    _CTSlotApp.subgameStarted()
}, subgameAnimFinished = function() {
    fast || _CTSlotApp.subgameAnimFinished()
}, prevWinDisplayLoop = function() {
    _CTSlotApp.prevWinDisplayLoop()
}, subgameFinished = function() {
    _CTSlotApp.subgameFinished()
}, waitForContinue = function() {
    _CTSlotApp.waitForContinue()
}, doubleSubgameFinished = function() {
    gotoNextState()
}, doubleSubgameStarted = function() {
    dbl.doubleSubgameStarted()
}, gameFinished = function() {
    currDemoMode = null, _CTSlotApp.gameFinished()
};
var App = function() {
    var e, t, a, n = 0,
        s = this,
        i = null;

    function r() {
		
		
        networkOut || (networkOut = 1, s.idleTimerStop(), null != _CTSlotApp ? _CTSlotApp.stopAllfunc() : alert("Network problеm! Retrying...")), null != t && setTimeout(function() {
            o(t, a)
        }, 2e3)
    }

    function o(e, a) {
        navigator.onLine ? (null != i && "poll" != t[0].command && i.abort(), i = $.ajax({
            type: "POST",
            data: {
                request: JSON.stringify(e),
                api_key: 1,
                checksum: 1
            },
			xhrFields: {
      withCredentials: true
   },
            url: serverurl+'?sessionId='+sessionStorage.getItem('sessionId'),
            error: function(e, t, a) {
                switch (t) {
                    default:
                        r();
                    case "abort":
                }
            },
            success: function(e, n, s) {
				
				e=JSON.parse(e);
				
				console.log(e);
				
                if (i = null, serverResponse = e[e.length - 1], null == serverResponse || null == serverResponse.status) TRACE("wrong response!", JSON.stringify(e)), r();
                else {
                    var o = serverResponse.status;
					console.log(serverResponse);
                    switch (o.status) {
                        case "server_sys_error":
                            e.length > 1 && "ok" == e[0].status.status && t.shift(), r();
                            break;
                        case "client_sys_error":
                        case "user_error":
                            showReload(o.msg + "<br>(" + o.code + ")");
                            break;
                        case "ok":
                            1!=1 ? TRACE("WRONG server response! Active command: " + JSON.stringify(t), JSON.stringify(e)) : ("game_finished" === serverResponse._req_command && (game_finished = 1), t = void 0, playerAccount = serverResponse.account_status, a && (a.onComplete && a.onComplete(), a.gotoNextState && gotoNextState(!0)), networkOut && (null != _CTSlotApp && _CTSlotApp.startAll(), networkOut = 0))
                    }
                }
            }
        })) : r()
    }

    function m() {
        n || s.idleTimerStart(), null != serverResponse.account_status && _CTSlotApp.playerAccountUpdated()
    }
    this.createSession = function() {
        sendCommand([{
            command: "create_session",
            secure_token: secureToken,
            icasino: icasino,
            account_id: icasino_account,
            session_key: session_key,
            app_data: "",
            app_id: "",
            seamless_credit: 1,
            placeholder: "any"
        }], {
            onComplete: sessionStartCmdOK
        })
    }, this.idleTimerStop = function() {
        n = 1, clearTimeout(e)
    }, this.idleTimerStart = function() {
        stopAll || (n = 0, e = setTimeout(function() {
            sendCommand([{
                command: "poll",
                game_id: gameID,
                game_name: gameName
            }], {
                onComplete: m
            })
        }, ping_time))
    }, sendCommand = function(e, n) {
        for (var s = 0; s < e.length; s++) e[s].resp_format = "JSON", e[s].sequence_number = ++activeSeq, e[s].session_id = session_id;
        t = e, a = n, o(e, n)
    }, sessionStartCmdOK = function() {
        switch (currSession = serverResponse, session_id = currSession.session_id, playerAccount = currSession.account_status, CurrencySign = playerAccount.currency_sign, Currency = playerAccount.currency, historyMax = currSession.last_game_recall_enabled, ping_time = 1e3 * (currSession.ping_interval ? currSession.ping_interval : 1), currSession.credit_display_mode) {
            case "cash_only":
                cashOnly = !0;
                break;
            case "credit_only":
                creditOnly = !0
        }
        gotoNextState(!1)
    }
};

function showReload(e) {
    if (null != _CTSlotApp)
        if (clearTimeout(congrTimer), inIntJackpot) {
            var t = document.getElementById("interactiveFrame").contentWindow.document.getElementById("interactiv");
            $(cw, t).css({
                display: "block",
                color: "white"
            }), $("#congr_text", t).html("Error!"), $("#congr_text0", t).html("<br>" + e), $("#congr_text1", t).html("")
        } else $("#congr_text").html("Error!"), $("#congr_text0").html("<br>" + e), $("#congr_text1").html(""), $(cw).css({
            display: "block",
            color: "white"
        }), $(msb).find(ms1).html(langText.PleaseReload), _CTSlotApp.stopAllfunc();
    else alert(e)
}

function TRACE() {
	
    for (var e = ", ", t = (new Date).getTime().toString() + e + activeSeq + e + "gameplay ID:" + gameplay_id + e + currSubgameIndex + e + subgamesList.toString() + QAtrace + e + state + ", App: " + appVer + ", slot:" + (null != _CTSlotApp ? CTSlotAppVersion : "undefined") + ", USER:" + navigator.userAgent, a = 0; a < arguments.length; a++) t += e + arguments[a];
    t += "\n";
    var n = JSON.stringify([{
        command: "trace",
        resp_format: "JSON",
        session_id: session_id,
        game_id: gameID,
        game_name: gameName,
        data: t,
        app_status: "status",
        client_vendor_id: "vendor",
        client_app_id: "app",
        token: secureToken,
        trace_type: trace_type
    }]);
    xhr = $.ajax({
        type: "POST",
        data: {
            request: n,
            api_key: 1,
            checksum: 1
        },
        url: serverurl
    }), console.log("TRACE: " + n)
}
window.addEventListener("error", function(e) {
    trace_type = "error", TRACE(JSON.stringify("msg: " + e.error.message + ", stack: " + e.error.stack)), showReload(langText.InternalError)
});